package tests

import (
	"math/big"
	"testing"

	g "github.com/zenon-network/go-zenon/chain/genesis/mock"
	"github.com/zenon-network/go-zenon/common"
	"github.com/zenon-network/go-zenon/common/types"
	"github.com/zenon-network/go-zenon/vm/embedded/definition"
)

func TestEncoding_MethodTypes(t *testing.T) {
	// string, address, uint8
	data, err := definition.ABIPillars.PackMethod(definition.RegisterMethodName, "Really long text which is more than 32 bytes", g.User1.Address, g.User1.Address, uint8(50), uint8(75))
	common.FailIfErr(t, err)
	common.ExpectBytes(t, data, "0x644de92700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000bbfd629028e53999aa179ac6de460ef72aa76e00000000000000000000000000bbfd629028e53999aa179ac6de460ef72aa76e0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000004b000000000000000000000000000000000000000000000000000000000000002c5265616c6c79206c6f6e672074657874207768696368206973206d6f7265207468616e2033322062797465730000000000000000000000000000000000000000")

	bigNumber, ok := new(big.Int).SetString("100192674782882803782111440113414025682552479032328974299164963818116775820252", 10)
	if ok == false {
		t.Fatalf("failed while parsing big number")
	}

	// uint256, bool
	data, err = definition.ABIToken.PackMethod(definition.IssueMethodName,
		"Really long text which is more than 32 bytes",
		"kinda short text",
		"what is this text does it ever end?01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
		bigNumber,
		big.NewInt(123456789),
		uint8(123),
		true,
		false,
		true,
	)
	common.FailIfErr(t, err)
	common.ExpectBytes(t, data, "0xbc410b910000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0dd830b5795be3bb449f464cece7ac7f1e2d05e8f219975dc8dbcaf4c8d723bdc00000000000000000000000000000000000000000000000000000000075bcd15000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002c5265616c6c79206c6f6e672074657874207768696368206973206d6f7265207468616e203332206279746573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000106b696e64612073686f72742074657874000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000091776861742069732074686973207465787420646f6573206974206576657220656e643f3031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233343536373839000000000000000000000000000000")

	// tokenStandard
	data, err = definition.ABIToken.PackMethod(definition.MintMethodName,
		types.ZnnTokenStandard,
		big.NewInt(123456789),
		g.User1.Address,
	)
	common.FailIfErr(t, err)
	common.ExpectBytes(t, data, "0xcd70f9bc0000000000000000000000000000000000000000000014e66318c6318c6318c600000000000000000000000000000000000000000000000000000000075bcd1500000000000000000000000000bbfd629028e53999aa179ac6de460ef72aa76e")

	// hash
	data, err = definition.ABIStake.PackMethod(definition.CancelStakeMethodName,
		types.NewHash([]byte{'t'}),
	)
	common.FailIfErr(t, err)
	common.ExpectBytes(t, data, "0x5a92fe32889729e8d2d8864a59db1e195ad67c76949578ff2b4637388564a81dd68fc01e")
}
